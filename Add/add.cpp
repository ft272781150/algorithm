/*
题目描述
在计算机中，由于处理器位宽限制，只能处理有限精度的十进制整数加减法，比如在32位宽处理器计算机中，
参与运算的操作数和结果必须在-231~231-1之间。如果需要进行更大范围的十进制整数加法，需要使用特殊
的方式实现，比如使用字符串保存操作数和结果，采取逐位运算的方式。如下：
9876543210 + 1234567890 = ?
让字符串 num1="9876543210"，字符串 num2="1234567890"，结果保存在字符串 result = "11111111100"。
-9876543210 + (-1234567890) = ?
让字符串 num1="-9876543210"，字符串 num2="-1234567890"，结果保存在字符串 result = "-11111111100"。




要求编程实现上述高精度的十进制加法。
要求实现方法：
public String add (String num1, String num2)
【输入】num1：字符串形式操作数1，如果操作数为负，则num1的前缀为符号位'-'
num2：字符串形式操作数2，如果操作数为负，则num2的前缀为符号位'-'
【返回】保存加法计算结果字符串，如果结果为负，则字符串的前缀为'-'
注：
(1)当输入为正数时，'+'不会出现在输入字符串中；当输入为负数时，'-'会出现在输入字符串中，且一定在输入字符串最左边位置；
(2)输入字符串所有位均代表有效数字，即不存在由'0'开始的输入字符串，比如"0012", "-0012"不会出现；
(3)要求输出字符串所有位均为有效数字，结果为正或0时'+'不出现在输出字符串，结果为负时输出字符串最左边位置为'-'。





输入描述:
输入两个字符串

输出描述:
输出给求和后的结果
*/
#include <iostream>
#include <string>
#include <algorithm>
#include <sstream>

using namespace std;

int str2int(string n)
{
	stringstream ss(n);
	int res;
	ss >> res;
	return res;
}

int char2int(char n)
{
	int res = (int)(n - 48);
	return res;
}

string int2string(int n)
{
	stringstream ss;
	ss << n;
	return ss.str();
}

char int2char(int n)
{
	char res;
	res = n + 48;
	return res;
}

string add_2positive(string num1, string num2)
{
	int carryOut = 0;
	int len1 = num1.size();
	int len2 = num2.size();
	if (len1 > len2)
	{
		num2.insert(0, len1 - len2, '0');
	}
	else if (len1 < len2)
	{
		num1.insert(0, len2 - len1, '0');
	}

	for (int i = num1.size() - 1; i >= 0; i--)
	{
		
		int v1 = char2int(num1[i]) + char2int(num2[i]) + carryOut;
		if (v1 >= 10)
		{
			num1[i] = int2char(v1 - 10);
			
			if (i != 0)
			{
				carryOut = 1;
			}
			else
			{
				num1.insert(0, 1, '1');
			}
		}
		else
		{
			carryOut = 0;
			num1[i] = int2char(v1);
		}
	}

	return num1;
}


string func(string num1, string num2)
{
	int borrowIn = 0;
	for (int i = num1.size() - 1; i >= 0; i--)
	{
		
		if ((char2int(num1[i]) - borrowIn) >= char2int(num2[i]))
		{
			int v1 = (char2int(num1[i]) - borrowIn) - char2int(num2[i]);
			num1[i] = int2char(v1);
			borrowIn = 0;
		}
		else
		{
			int v1 = char2int(num1[i]) - borrowIn + 10 - char2int(num2[i]);
			num1[i] = int2char(v1);
			borrowIn = 1;
		}
	}
	int j = 0;
	while (num1[j] == '0')
	{
		num1 = num1.substr(1);
	}

	return num1;
}


string reduce(string num1, string num2)//num1-num2
{
	string num2Sub = num2.substr(1);
	int len1 = num1.size();
	int len2 = num2Sub.size();
	if (len1 > len2)
	{
		num2Sub.insert(0, len1 - len2, '0');
	}
	else if (len1 < len2)
	{
		num1.insert(0, len2 - len1, '0');
	}


	if (max(num1, num2Sub) == num1)
	{
		return func(num1, num2Sub);
	}
	else
	{
		return '-' + func(num2Sub, num1);
	}
}

string add(string num1, string num2)
{
	if (num1[0] == '-' && num2[0] == '-')
	{
		return add_2positive(num1.substr(1), num2.substr(1)).insert(0, 1, '-');
	}
	else if (num1[0] == '-' && num2[0] != '-')
	{
		return reduce(num2, num1);
	}
	else if (num1[0] != '-' && num2[0] == '-')
	{
		return reduce(num1, num2);
	}
	else
	{
		return add_2positive(num1, num2);
	}
	
}

int main()
{
	string str1, str2;
	while (cin >> str1 >> str2)
	{
		cout << add(str1, str2) << endl;
	}

	return 0;
}


